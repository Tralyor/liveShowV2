<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns="http://www.springframework.org/schema/beans"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd                            
	 http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-2.5.xsd" >

    <!-- This context is shared between all child contexts. -->
    <!-- Server bean -->

    <bean
        id="red5.server"
        class="org.red5.server.Server" />
    <!-- JMX server -->

    <!-- Serializes objects to AMF binary -->

    <bean
        id="serializer"
        class="org.red5.io.object.Serializer" />
    <!-- Deserializes objects from AMF binary -->

    <bean
        id="deserializer"
        class="org.red5.io.object.Deserializer" />
     <!-- Deals with StatusObjects representing statuses like NetConnection.Connect.Success status -->
    <bean id="statusObjectService" class="org.red5.server.net.rtmp.status.StatusObjectService" autowire="byType" /> 
    <!-- RTMP codec factory -->
<bean id="minaEncoder" class="org.red5.server.net.rtmp.codec.RTMPMinaProtocolEncoder" scope="prototype" />

    <bean id="minaDecoder" class="org.red5.server.net.rtmp.codec.RTMPMinaProtocolDecoder" scope="prototype" />

    
    <!-- RTMPT codec factory -->

    <bean
        id="rtmptCodecFactory"
        autowire="byType"
        class="org.red5.server.net.rtmpt.codec.RTMPTCodecFactory"
        init-method="init" >
		<property name="baseTolerance" value="${rtmpt.encoder_base_tolerance}" />
        <property name="dropLiveFuture" value="${rtmpt.encoder_drop_live_future}" />
    </bean>
    <!-- Remoting calls codec factory -->

    <bean
        id="remotingCodecFactory"
        autowire="byType"
        class="org.red5.server.net.remoting.codec.RemotingCodecFactory"
        init-method="init" />
    <!-- Streamable file factory -->
<bean id="streamableFileFactory" class="org.red5.server.stream.StreamableFileFactory">
        <property name="services">
            <list>
                <bean id="flvFileService" class="org.red5.server.service.flv.impl.FLVService">
                    <property name="generateMetadata" value="true"/>
                </bean>
                <bean id="mp3FileService" class="org.red5.server.service.mp3.impl.MP3Service"/>
                <bean id="mp4FileService" class="org.red5.server.service.mp4.impl.MP4Service"/>
                <bean id="m4aFileService" class="org.red5.server.service.m4a.impl.M4AService"/>
            </list>
        </property>
    </bean>
    <!-- Thread that writes modified objects to disk periodically -->

    <!-- Handles creation / lookup of shared objects -->

    <bean id="sharedObjectService" class="org.red5.server.so.SharedObjectService">
        <property name="maximumEventsPerUpdate" value="${so.max.events.per.update}"/>
        <property name="persistenceClassName">
            <value>org.red5.server.persistence.FilePersistence</value>
        </property>
        <property name="scheduler">
            <bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
                <property name="poolSize" value="${so.scheduler.pool_size}" />  
                <property name="waitForTasksToCompleteOnShutdown" value="false"/>
                <property name="daemon" value="true"/>
                <property name="threadNamePrefix" value="SharedObjectScheduler-"/>
            </bean>
        </property>
    </bean>
    <!-- High level access to streams -->

    <bean
        id="streamService"
        class="org.red5.server.stream.StreamService" />
    <!-- High level access to broadcasted streams -->

    <bean
        id="providerService"
        class="org.red5.server.stream.ProviderService" />
    <!-- Provides output to consumers -->

    <bean
        id="consumerService"
        class="org.red5.server.stream.ConsumerService" />
    <!-- Scheduling service -->

    <bean
        id="schedulingService"
        class="org.red5.server.scheduling.QuartzSchedulingService" />
    <!-- Use injection to setup thread pool for remoting clients -->

    <bean
        id="remotingClient"
        class="org.red5.server.net.remoting.RemotingClient" >

        <property
            name="poolSize"
            value="2" />
    </bean>
    <!--
	Now we can load the cache engine, only one may be enabled at a time. If no-caching is required select the
	NoCacheImpl. Three other implementations based on EhCache, WhirlyCache, and Red5Cache are also available.


    -->
 <bean id="object.cache" class="org.red5.cache.impl.NoCacheImpl"/>
    <!-- Cache to use for keyframe metadata. -->

    <bean id="keyframe.cache" class="org.red5.io.CachingFileKeyFrameMetaCache">
        <property name="maxCacheEntry" value="${keyframe.cache.entry.max}" />
    </bean>
    <!--
	    Represents FLV files
	    Use injection to set the cache impl to be used with flvs


    -->

    <bean
        id="flv.impl"
        class="org.red5.io.flv.impl.FLV" >

        <property name="cache" >

            <ref bean="object.cache" />
        </property>
    </bean>
    <!-- Use injection to set the keyframe cache for FLV files -->
 <bean id="flvreader.impl" class="org.red5.io.flv.impl.FLVReader">
        <property name="keyFrameCache">
            <ref bean="keyframe.cache"/>
        </property>
    </bean>
    <!-- Use injection to set the keyframe cache for MP3 files -->

    <bean
        id="mp3reader.impl"
        class="org.red5.io.mp3.impl.MP3Reader" >

        <property name="frameCache" >

            <ref bean="keyframe.cache" />
        </property>
    </bean>
    <!-- Use injection to set the buffer type for reading FLV files -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod">
            <value>org.red5.io.flv.impl.FLVReader.setBufferType</value>
        </property>
        <!-- Three buffer types are available 'auto', 'heap', and 'direct' -->
        <property name="arguments" value="auto"/>
    </bean>
    <!-- Use injection to set the buffer size for reading FLV files -->
 <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod">
            <value>org.red5.io.flv.impl.FLVReader.setBufferSize</value>
        </property>
        <!-- Three buffer types are available 'auto', 'heap', and 'direct' -->
        <property name="arguments" value="4096"/>
    </bean>
    <!--
         Executor that will be used to schedule stream playback to keep
		the client buffer filled.


    -->

    <bean
        id="streamExecutor"
        class="java.util.concurrent.ScheduledThreadPoolExecutor" >

        <constructor-arg value="16" />

        <property
            name="maximumPoolSize"
            value="64" />
    </bean>
    <!--
         ClientBroadcastStream and PlaylistSubscriberStream
		that will be used by RTMPConnection and maybe other classes.
		These beans are lazy-init because most likely server will need
		to be up and running before we can get a smart implementation
		of these streams


    -->
 <bean id="playlistSubscriberStream" scope="prototype" lazy-init="true" class="org.red5.server.stream.PlaylistSubscriberStream">
        <!-- Check for buffer underruns every X ms and generate NetStream.Play.InsufficientBW accordingly.
             Set to 0 to disable. Be careful not to set this value too small to avoid network congestion.
          -->
        <property name="bufferCheckInterval" value="${subscriberstream.buffer.check.interval}"/>
        <!-- A NetStream.Play.InsufficientBW message is generated if more than X messages are queued for sending on the connection.
             This value will also control the maximum pending messages on the server. To use a smaller value on slow connections
             to get smaller delay for downstream server commands.
          -->
        <property name="underrunTrigger" value="${subscriberstream.underrun.trigger}"/>
    </bean>

    <bean
        id="clientBroadcastStream"
        class="org.red5.server.stream.ClientBroadcastStream"
        lazy-init="true"
        scope="prototype" />

</beans>